// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Ast_helper$Jeason = require("../node_modules/bs-platform/vendor/ocaml/parsing/ast_helper.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function correctIdentifier(ident) {
  var stripLeadingUnderscores = function (_s) {
    while(true) {
      var s = _s;
      if (s.length === 0 || Caml_string.get(s, 0) !== /* "_" */95) {
        return s;
      } else {
        _s = $$String.sub(s, 1, s.length - 1 | 0);
        continue ;
      }
    };
  };
  if (ident === "") {
    return ident;
  } else {
    var correctedName = stripLeadingUnderscores(ident);
    var match = $$String.contains(correctedName, /* "_" */95);
    var correctedName$1 = match ? correctedName + "_" : correctedName;
    var correctedName$2 = $$String.uncapitalize(correctedName$1);
    switch (correctedName$2) {
      case "object" : 
          return "object_";
      case "type" : 
          return "type_";
      default:
        return correctedName$2;
    }
  }
}

function astHelperStrLidIdent($staropt$star, a) {
  var correct = $staropt$star ? $staropt$star[0] : true;
  if (a) {
    var inner = /* Lident */Block.__(0, [correct ? correctIdentifier(List.hd(a)) : List.hd(a)]);
    var res = List.fold_left((function (acc, curr) {
            return /* Ldot */Block.__(1, [
                      acc,
                      correct ? correctIdentifier(curr) : curr
                    ]);
          }), inner, List.tl(a));
    return /* record */[
            /* txt */res,
            /* loc */Ast_helper$Jeason.default_loc[/* contents */0]
          ];
  } else {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "identifier is empty."
        ];
  }
}

function placeholder(s) {
  return Ast_helper$Jeason.Str[/* eval */1](/* None */0, /* None */0, Ast_helper$Jeason.Exp[/* ident */2](/* None */0, /* None */0, astHelperStrLidIdent(/* None */0, /* :: */[
                      s,
                      /* [] */0
                    ])));
}

exports.correctIdentifier = correctIdentifier;
exports.astHelperStrLidIdent = astHelperStrLidIdent;
exports.placeholder = placeholder;
/* Ast_helper-Jeason Not a pure module */
