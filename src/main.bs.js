// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Sys = require("bs-platform/lib/js/sys.js");
var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Parser_flow$Jeason = require("./parser_flow.bs.js");
var IrTransformer$Jeason = require("./IrTransformer.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var HandleTopStatement$Jeason = require("./HandleTopStatement.bs.js");

if (Sys.argv.length !== 3) {
  throw [
        Caml_builtin_exceptions.invalid_argument,
        "Please provide as argument the JS file to convert over."
      ];
} else {
  var file = Caml_array.caml_array_get(Sys.argv, 2);
  var content = Fs.readFileSync(file, "utf8");
  var match = Parser_flow$Jeason.program_file(/* Some */[false], /* None */0, /* Some */[/* Some */[/* record */[
            /* esproposal_class_instance_fields */true,
            /* esproposal_class_static_fields */true,
            /* esproposal_decorators */true,
            /* esproposal_export_star_as */true,
            /* types */true,
            /* use_strict */false
          ]]], content, /* Some */[/* SourceFile */Block.__(1, [file])]);
  IrTransformer$Jeason.transform(List.fold_left(HandleTopStatement$Jeason.mapper, /* record */[
              /* identifiers : [] */0,
              /* outputStatements : [] */0
            ], match[0][1])[/* outputStatements */1]);
}

/*  Not a pure module */
