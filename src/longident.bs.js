// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var $$String = require("bs-platform/lib/js/string.js");
var Misc$Jeason = require("./misc.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function flatten(lid) {
  var _accu = /* [] */0;
  var _param = lid;
  while(true) {
    var param = _param;
    var accu = _accu;
    switch (param.tag | 0) {
      case 0 : 
          return /* :: */[
                  param[0],
                  accu
                ];
      case 1 : 
          _param = param[0];
          _accu = /* :: */[
            param[1],
            accu
          ];
          continue ;
          case 2 : 
          return Misc$Jeason.fatal_error("Longident.flat");
      
    }
  };
}

function last(param) {
  switch (param.tag | 0) {
    case 0 : 
        return param[0];
    case 1 : 
        return param[1];
    case 2 : 
        return Misc$Jeason.fatal_error("Longident.last");
    
  }
}

function split_at_dots(s, pos) {
  try {
    var dot = $$String.index_from(s, pos, /* "." */46);
    return /* :: */[
            $$String.sub(s, pos, dot - pos | 0),
            split_at_dots(s, dot + 1 | 0)
          ];
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* :: */[
              $$String.sub(s, pos, s.length - pos | 0),
              /* [] */0
            ];
    } else {
      throw exn;
    }
  }
}

function parse(s) {
  var match = split_at_dots(s, 0);
  if (match) {
    return List.fold_left((function (p, s) {
                  return /* Ldot */Block.__(1, [
                            p,
                            s
                          ]);
                }), /* Lident */Block.__(0, [match[0]]), match[1]);
  } else {
    return /* Lident */Block.__(0, [""]);
  }
}

exports.flatten = flatten;
exports.last = last;
exports.parse = parse;
/* Misc-Jeason Not a pure module */
