// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Location$Jeason = require("./location.bs.js");
var Docstrings$Jeason = require("./docstrings.bs.js");

var default_loc = [Location$Jeason.none];

function with_default_loc(l, f) {
  var old = default_loc[0];
  default_loc[0] = l;
  try {
    var r = Curry._1(f, /* () */0);
    default_loc[0] = old;
    return r;
  }
  catch (exn){
    default_loc[0] = old;
    throw exn;
  }
}

function mk($staropt$star, $staropt$star$1, d) {
  var loc = $staropt$star ? $staropt$star[0] : default_loc[0];
  var attrs = $staropt$star$1 ? $staropt$star$1[0] : /* [] */0;
  return /* record */[
          /* ptyp_desc */d,
          /* ptyp_loc */loc,
          /* ptyp_attributes */attrs
        ];
}

function attr(d, a) {
  return /* record */[
          /* ptyp_desc */d[/* ptyp_desc */0],
          /* ptyp_loc */d[/* ptyp_loc */1],
          /* ptyp_attributes */Pervasives.$at(d[/* ptyp_attributes */2], /* :: */[
                a,
                /* [] */0
              ])
        ];
}

function any(loc, attrs, _) {
  return mk(loc, attrs, /* Ptyp_any */0);
}

function $$var(loc, attrs, a) {
  return mk(loc, attrs, /* Ptyp_var */Block.__(0, [a]));
}

function arrow(loc, attrs, a, b, c) {
  return mk(loc, attrs, /* Ptyp_arrow */Block.__(1, [
                a,
                b,
                c
              ]));
}

function tuple(loc, attrs, a) {
  return mk(loc, attrs, /* Ptyp_tuple */Block.__(2, [a]));
}

function constr(loc, attrs, a, b) {
  return mk(loc, attrs, /* Ptyp_constr */Block.__(3, [
                a,
                b
              ]));
}

function object_(loc, attrs, a, b) {
  return mk(loc, attrs, /* Ptyp_object */Block.__(4, [
                a,
                b
              ]));
}

function class_(loc, attrs, a, b) {
  return mk(loc, attrs, /* Ptyp_class */Block.__(5, [
                a,
                b
              ]));
}

function alias(loc, attrs, a, b) {
  return mk(loc, attrs, /* Ptyp_alias */Block.__(6, [
                a,
                b
              ]));
}

function variant(loc, attrs, a, b, c) {
  return mk(loc, attrs, /* Ptyp_variant */Block.__(7, [
                a,
                b,
                c
              ]));
}

function poly(loc, attrs, a, b) {
  return mk(loc, attrs, /* Ptyp_poly */Block.__(8, [
                a,
                b
              ]));
}

function $$package(loc, attrs, a, b) {
  return mk(loc, attrs, /* Ptyp_package */Block.__(9, [/* tuple */[
                  a,
                  b
                ]]));
}

function extension(loc, attrs, a) {
  return mk(loc, attrs, /* Ptyp_extension */Block.__(10, [a]));
}

function force_poly(t) {
  var match = t[/* ptyp_desc */0];
  var exit = 0;
  if (typeof match === "number" || match.tag !== 8) {
    exit = 1;
  } else {
    return t;
  }
  if (exit === 1) {
    return poly(/* Some */[t[/* ptyp_loc */1]], /* None */0, /* [] */0, t);
  }
  
}

var Typ = /* module */[
  /* mk */mk,
  /* attr */attr,
  /* any */any,
  /* var */$$var,
  /* arrow */arrow,
  /* tuple */tuple,
  /* constr */constr,
  /* object_ */object_,
  /* class_ */class_,
  /* alias */alias,
  /* variant */variant,
  /* poly */poly,
  /* package */$$package,
  /* extension */extension,
  /* force_poly */force_poly
];

function mk$1($staropt$star, $staropt$star$1, d) {
  var loc = $staropt$star ? $staropt$star[0] : default_loc[0];
  var attrs = $staropt$star$1 ? $staropt$star$1[0] : /* [] */0;
  return /* record */[
          /* ppat_desc */d,
          /* ppat_loc */loc,
          /* ppat_attributes */attrs
        ];
}

function attr$1(d, a) {
  return /* record */[
          /* ppat_desc */d[/* ppat_desc */0],
          /* ppat_loc */d[/* ppat_loc */1],
          /* ppat_attributes */Pervasives.$at(d[/* ppat_attributes */2], /* :: */[
                a,
                /* [] */0
              ])
        ];
}

function any$1(loc, attrs, _) {
  return mk$1(loc, attrs, /* Ppat_any */0);
}

function $$var$1(loc, attrs, a) {
  return mk$1(loc, attrs, /* Ppat_var */Block.__(0, [a]));
}

function alias$1(loc, attrs, a, b) {
  return mk$1(loc, attrs, /* Ppat_alias */Block.__(1, [
                a,
                b
              ]));
}

function constant(loc, attrs, a) {
  return mk$1(loc, attrs, /* Ppat_constant */Block.__(2, [a]));
}

function interval(loc, attrs, a, b) {
  return mk$1(loc, attrs, /* Ppat_interval */Block.__(3, [
                a,
                b
              ]));
}

function tuple$1(loc, attrs, a) {
  return mk$1(loc, attrs, /* Ppat_tuple */Block.__(4, [a]));
}

function construct(loc, attrs, a, b) {
  return mk$1(loc, attrs, /* Ppat_construct */Block.__(5, [
                a,
                b
              ]));
}

function variant$1(loc, attrs, a, b) {
  return mk$1(loc, attrs, /* Ppat_variant */Block.__(6, [
                a,
                b
              ]));
}

function record(loc, attrs, a, b) {
  return mk$1(loc, attrs, /* Ppat_record */Block.__(7, [
                a,
                b
              ]));
}

function array(loc, attrs, a) {
  return mk$1(loc, attrs, /* Ppat_array */Block.__(8, [a]));
}

function or_(loc, attrs, a, b) {
  return mk$1(loc, attrs, /* Ppat_or */Block.__(9, [
                a,
                b
              ]));
}

function constraint_(loc, attrs, a, b) {
  return mk$1(loc, attrs, /* Ppat_constraint */Block.__(10, [
                a,
                b
              ]));
}

function type_(loc, attrs, a) {
  return mk$1(loc, attrs, /* Ppat_type */Block.__(11, [a]));
}

function lazy_(loc, attrs, a) {
  return mk$1(loc, attrs, /* Ppat_lazy */Block.__(12, [a]));
}

function unpack(loc, attrs, a) {
  return mk$1(loc, attrs, /* Ppat_unpack */Block.__(13, [a]));
}

function exception_(loc, attrs, a) {
  return mk$1(loc, attrs, /* Ppat_exception */Block.__(14, [a]));
}

function extension$1(loc, attrs, a) {
  return mk$1(loc, attrs, /* Ppat_extension */Block.__(15, [a]));
}

var Pat = /* module */[
  /* mk */mk$1,
  /* attr */attr$1,
  /* any */any$1,
  /* var */$$var$1,
  /* alias */alias$1,
  /* constant */constant,
  /* interval */interval,
  /* tuple */tuple$1,
  /* construct */construct,
  /* variant */variant$1,
  /* record */record,
  /* array */array,
  /* or_ */or_,
  /* constraint_ */constraint_,
  /* type_ */type_,
  /* lazy_ */lazy_,
  /* unpack */unpack,
  /* exception_ */exception_,
  /* extension */extension$1
];

function mk$2($staropt$star, $staropt$star$1, d) {
  var loc = $staropt$star ? $staropt$star[0] : default_loc[0];
  var attrs = $staropt$star$1 ? $staropt$star$1[0] : /* [] */0;
  return /* record */[
          /* pexp_desc */d,
          /* pexp_loc */loc,
          /* pexp_attributes */attrs
        ];
}

function attr$2(d, a) {
  return /* record */[
          /* pexp_desc */d[/* pexp_desc */0],
          /* pexp_loc */d[/* pexp_loc */1],
          /* pexp_attributes */Pervasives.$at(d[/* pexp_attributes */2], /* :: */[
                a,
                /* [] */0
              ])
        ];
}

function ident(loc, attrs, a) {
  return mk$2(loc, attrs, /* Pexp_ident */Block.__(0, [a]));
}

function constant$1(loc, attrs, a) {
  return mk$2(loc, attrs, /* Pexp_constant */Block.__(1, [a]));
}

function let_(loc, attrs, a, b, c) {
  return mk$2(loc, attrs, /* Pexp_let */Block.__(2, [
                a,
                b,
                c
              ]));
}

function fun_(loc, attrs, a, b, c, d) {
  return mk$2(loc, attrs, /* Pexp_fun */Block.__(4, [
                a,
                b,
                c,
                d
              ]));
}

function function_(loc, attrs, a) {
  return mk$2(loc, attrs, /* Pexp_function */Block.__(3, [a]));
}

function apply(loc, attrs, a, b) {
  return mk$2(loc, attrs, /* Pexp_apply */Block.__(5, [
                a,
                b
              ]));
}

function match_(loc, attrs, a, b) {
  return mk$2(loc, attrs, /* Pexp_match */Block.__(6, [
                a,
                b
              ]));
}

function try_(loc, attrs, a, b) {
  return mk$2(loc, attrs, /* Pexp_try */Block.__(7, [
                a,
                b
              ]));
}

function tuple$2(loc, attrs, a) {
  return mk$2(loc, attrs, /* Pexp_tuple */Block.__(8, [a]));
}

function construct$1(loc, attrs, a, b) {
  return mk$2(loc, attrs, /* Pexp_construct */Block.__(9, [
                a,
                b
              ]));
}

function variant$2(loc, attrs, a, b) {
  return mk$2(loc, attrs, /* Pexp_variant */Block.__(10, [
                a,
                b
              ]));
}

function record$1(loc, attrs, a, b) {
  return mk$2(loc, attrs, /* Pexp_record */Block.__(11, [
                a,
                b
              ]));
}

function field(loc, attrs, a, b) {
  return mk$2(loc, attrs, /* Pexp_field */Block.__(12, [
                a,
                b
              ]));
}

function setfield(loc, attrs, a, b, c) {
  return mk$2(loc, attrs, /* Pexp_setfield */Block.__(13, [
                a,
                b,
                c
              ]));
}

function array$1(loc, attrs, a) {
  return mk$2(loc, attrs, /* Pexp_array */Block.__(14, [a]));
}

function ifthenelse(loc, attrs, a, b, c) {
  return mk$2(loc, attrs, /* Pexp_ifthenelse */Block.__(15, [
                a,
                b,
                c
              ]));
}

function sequence(loc, attrs, a, b) {
  return mk$2(loc, attrs, /* Pexp_sequence */Block.__(16, [
                a,
                b
              ]));
}

function while_(loc, attrs, a, b) {
  return mk$2(loc, attrs, /* Pexp_while */Block.__(17, [
                a,
                b
              ]));
}

function for_(loc, attrs, a, b, c, d, e) {
  return mk$2(loc, attrs, /* Pexp_for */Block.__(18, [
                a,
                b,
                c,
                d,
                e
              ]));
}

function constraint_$1(loc, attrs, a, b) {
  return mk$2(loc, attrs, /* Pexp_constraint */Block.__(19, [
                a,
                b
              ]));
}

function coerce(loc, attrs, a, b, c) {
  return mk$2(loc, attrs, /* Pexp_coerce */Block.__(20, [
                a,
                b,
                c
              ]));
}

function send(loc, attrs, a, b) {
  return mk$2(loc, attrs, /* Pexp_send */Block.__(21, [
                a,
                b
              ]));
}

function new_(loc, attrs, a) {
  return mk$2(loc, attrs, /* Pexp_new */Block.__(22, [a]));
}

function setinstvar(loc, attrs, a, b) {
  return mk$2(loc, attrs, /* Pexp_setinstvar */Block.__(23, [
                a,
                b
              ]));
}

function override(loc, attrs, a) {
  return mk$2(loc, attrs, /* Pexp_override */Block.__(24, [a]));
}

function letmodule(loc, attrs, a, b, c) {
  return mk$2(loc, attrs, /* Pexp_letmodule */Block.__(25, [
                a,
                b,
                c
              ]));
}

function assert_(loc, attrs, a) {
  return mk$2(loc, attrs, /* Pexp_assert */Block.__(26, [a]));
}

function lazy_$1(loc, attrs, a) {
  return mk$2(loc, attrs, /* Pexp_lazy */Block.__(27, [a]));
}

function poly$1(loc, attrs, a, b) {
  return mk$2(loc, attrs, /* Pexp_poly */Block.__(28, [
                a,
                b
              ]));
}

function object_$1(loc, attrs, a) {
  return mk$2(loc, attrs, /* Pexp_object */Block.__(29, [a]));
}

function newtype(loc, attrs, a, b) {
  return mk$2(loc, attrs, /* Pexp_newtype */Block.__(30, [
                a,
                b
              ]));
}

function pack(loc, attrs, a) {
  return mk$2(loc, attrs, /* Pexp_pack */Block.__(31, [a]));
}

function open_(loc, attrs, a, b, c) {
  return mk$2(loc, attrs, /* Pexp_open */Block.__(32, [
                a,
                b,
                c
              ]));
}

function extension$2(loc, attrs, a) {
  return mk$2(loc, attrs, /* Pexp_extension */Block.__(33, [a]));
}

function $$case(lhs, guard, rhs) {
  return /* record */[
          /* pc_lhs */lhs,
          /* pc_guard */guard,
          /* pc_rhs */rhs
        ];
}

function mk$3($staropt$star, $staropt$star$1, d) {
  var loc = $staropt$star ? $staropt$star[0] : default_loc[0];
  var attrs = $staropt$star$1 ? $staropt$star$1[0] : /* [] */0;
  return /* record */[
          /* pmty_desc */d,
          /* pmty_loc */loc,
          /* pmty_attributes */attrs
        ];
}

function attr$3(d, a) {
  return /* record */[
          /* pmty_desc */d[/* pmty_desc */0],
          /* pmty_loc */d[/* pmty_loc */1],
          /* pmty_attributes */Pervasives.$at(d[/* pmty_attributes */2], /* :: */[
                a,
                /* [] */0
              ])
        ];
}

function ident$1(loc, attrs, a) {
  return mk$3(loc, attrs, /* Pmty_ident */Block.__(0, [a]));
}

function alias$2(loc, attrs, a) {
  return mk$3(loc, attrs, /* Pmty_alias */Block.__(6, [a]));
}

function signature(loc, attrs, a) {
  return mk$3(loc, attrs, /* Pmty_signature */Block.__(1, [a]));
}

function functor_(loc, attrs, a, b, c) {
  return mk$3(loc, attrs, /* Pmty_functor */Block.__(2, [
                a,
                b,
                c
              ]));
}

function with_(loc, attrs, a, b) {
  return mk$3(loc, attrs, /* Pmty_with */Block.__(3, [
                a,
                b
              ]));
}

function typeof_(loc, attrs, a) {
  return mk$3(loc, attrs, /* Pmty_typeof */Block.__(4, [a]));
}

function extension$3(loc, attrs, a) {
  return mk$3(loc, attrs, /* Pmty_extension */Block.__(5, [a]));
}

var Mty = /* module */[
  /* mk */mk$3,
  /* attr */attr$3,
  /* ident */ident$1,
  /* alias */alias$2,
  /* signature */signature,
  /* functor_ */functor_,
  /* with_ */with_,
  /* typeof_ */typeof_,
  /* extension */extension$3
];

function mk$4($staropt$star, $staropt$star$1, d) {
  var loc = $staropt$star ? $staropt$star[0] : default_loc[0];
  var attrs = $staropt$star$1 ? $staropt$star$1[0] : /* [] */0;
  return /* record */[
          /* pmod_desc */d,
          /* pmod_loc */loc,
          /* pmod_attributes */attrs
        ];
}

function attr$4(d, a) {
  return /* record */[
          /* pmod_desc */d[/* pmod_desc */0],
          /* pmod_loc */d[/* pmod_loc */1],
          /* pmod_attributes */Pervasives.$at(d[/* pmod_attributes */2], /* :: */[
                a,
                /* [] */0
              ])
        ];
}

function ident$2(loc, attrs, x) {
  return mk$4(loc, attrs, /* Pmod_ident */Block.__(0, [x]));
}

function structure(loc, attrs, x) {
  return mk$4(loc, attrs, /* Pmod_structure */Block.__(1, [x]));
}

function functor_$1(loc, attrs, arg, arg_ty, body) {
  return mk$4(loc, attrs, /* Pmod_functor */Block.__(2, [
                arg,
                arg_ty,
                body
              ]));
}

function apply$1(loc, attrs, m1, m2) {
  return mk$4(loc, attrs, /* Pmod_apply */Block.__(3, [
                m1,
                m2
              ]));
}

function constraint_$2(loc, attrs, m, mty) {
  return mk$4(loc, attrs, /* Pmod_constraint */Block.__(4, [
                m,
                mty
              ]));
}

function unpack$1(loc, attrs, e) {
  return mk$4(loc, attrs, /* Pmod_unpack */Block.__(5, [e]));
}

function extension$4(loc, attrs, a) {
  return mk$4(loc, attrs, /* Pmod_extension */Block.__(6, [a]));
}

var Mod = /* module */[
  /* mk */mk$4,
  /* attr */attr$4,
  /* ident */ident$2,
  /* structure */structure,
  /* functor_ */functor_$1,
  /* apply */apply$1,
  /* constraint_ */constraint_$2,
  /* unpack */unpack$1,
  /* extension */extension$4
];

function mk$5($staropt$star, d) {
  var loc = $staropt$star ? $staropt$star[0] : default_loc[0];
  return /* record */[
          /* psig_desc */d,
          /* psig_loc */loc
        ];
}

function value(loc, a) {
  return mk$5(loc, /* Psig_value */Block.__(0, [a]));
}

function type_$1(loc, a) {
  return mk$5(loc, /* Psig_type */Block.__(1, [a]));
}

function type_extension(loc, a) {
  return mk$5(loc, /* Psig_typext */Block.__(2, [a]));
}

function exception_$1(loc, a) {
  return mk$5(loc, /* Psig_exception */Block.__(3, [a]));
}

function module_(loc, a) {
  return mk$5(loc, /* Psig_module */Block.__(4, [a]));
}

function rec_module(loc, a) {
  return mk$5(loc, /* Psig_recmodule */Block.__(5, [a]));
}

function modtype(loc, a) {
  return mk$5(loc, /* Psig_modtype */Block.__(6, [a]));
}

function open_$1(loc, a) {
  return mk$5(loc, /* Psig_open */Block.__(7, [a]));
}

function include_(loc, a) {
  return mk$5(loc, /* Psig_include */Block.__(8, [a]));
}

function class_$1(loc, a) {
  return mk$5(loc, /* Psig_class */Block.__(9, [a]));
}

function class_type(loc, a) {
  return mk$5(loc, /* Psig_class_type */Block.__(10, [a]));
}

function extension$5(loc, $staropt$star, a) {
  var attrs = $staropt$star ? $staropt$star[0] : /* [] */0;
  return mk$5(loc, /* Psig_extension */Block.__(12, [
                a,
                attrs
              ]));
}

function attribute(loc, a) {
  return mk$5(loc, /* Psig_attribute */Block.__(11, [a]));
}

function text(txt) {
  return List.map((function (ds) {
                var a = Docstrings$Jeason.text_attr(ds);
                var loc = /* Some */[Docstrings$Jeason.docstring_loc(ds)];
                return mk$5(loc, /* Psig_attribute */Block.__(11, [a]));
              }), txt);
}

var Sig = /* module */[
  /* mk */mk$5,
  /* value */value,
  /* type_ */type_$1,
  /* type_extension */type_extension,
  /* exception_ */exception_$1,
  /* module_ */module_,
  /* rec_module */rec_module,
  /* modtype */modtype,
  /* open_ */open_$1,
  /* include_ */include_,
  /* class_ */class_$1,
  /* class_type */class_type,
  /* extension */extension$5,
  /* attribute */attribute,
  /* text */text
];

function mk$6($staropt$star, d) {
  var loc = $staropt$star ? $staropt$star[0] : default_loc[0];
  return /* record */[
          /* pstr_desc */d,
          /* pstr_loc */loc
        ];
}

function $$eval(loc, $staropt$star, a) {
  var attrs = $staropt$star ? $staropt$star[0] : /* [] */0;
  return mk$6(loc, /* Pstr_eval */Block.__(0, [
                a,
                attrs
              ]));
}

function value$1(loc, a, b) {
  return mk$6(loc, /* Pstr_value */Block.__(1, [
                a,
                b
              ]));
}

function primitive(loc, a) {
  return mk$6(loc, /* Pstr_primitive */Block.__(2, [a]));
}

function type_$2(loc, a) {
  return mk$6(loc, /* Pstr_type */Block.__(3, [a]));
}

function type_extension$1(loc, a) {
  return mk$6(loc, /* Pstr_typext */Block.__(4, [a]));
}

function exception_$2(loc, a) {
  return mk$6(loc, /* Pstr_exception */Block.__(5, [a]));
}

function module_$1(loc, a) {
  return mk$6(loc, /* Pstr_module */Block.__(6, [a]));
}

function rec_module$1(loc, a) {
  return mk$6(loc, /* Pstr_recmodule */Block.__(7, [a]));
}

function modtype$1(loc, a) {
  return mk$6(loc, /* Pstr_modtype */Block.__(8, [a]));
}

function open_$2(loc, a) {
  return mk$6(loc, /* Pstr_open */Block.__(9, [a]));
}

function class_$2(loc, a) {
  return mk$6(loc, /* Pstr_class */Block.__(10, [a]));
}

function class_type$1(loc, a) {
  return mk$6(loc, /* Pstr_class_type */Block.__(11, [a]));
}

function include_$1(loc, a) {
  return mk$6(loc, /* Pstr_include */Block.__(12, [a]));
}

function extension$6(loc, $staropt$star, a) {
  var attrs = $staropt$star ? $staropt$star[0] : /* [] */0;
  return mk$6(loc, /* Pstr_extension */Block.__(14, [
                a,
                attrs
              ]));
}

function attribute$1(loc, a) {
  return mk$6(loc, /* Pstr_attribute */Block.__(13, [a]));
}

function text$1(txt) {
  return List.map((function (ds) {
                var a = Docstrings$Jeason.text_attr(ds);
                var loc = /* Some */[Docstrings$Jeason.docstring_loc(ds)];
                return mk$6(loc, /* Pstr_attribute */Block.__(13, [a]));
              }), txt);
}

var Str = /* module */[
  /* mk */mk$6,
  /* eval */$$eval,
  /* value */value$1,
  /* primitive */primitive,
  /* type_ */type_$2,
  /* type_extension */type_extension$1,
  /* exception_ */exception_$2,
  /* module_ */module_$1,
  /* rec_module */rec_module$1,
  /* modtype */modtype$1,
  /* open_ */open_$2,
  /* class_ */class_$2,
  /* class_type */class_type$1,
  /* include_ */include_$1,
  /* extension */extension$6,
  /* attribute */attribute$1,
  /* text */text$1
];

function mk$7($staropt$star, $staropt$star$1, d) {
  var loc = $staropt$star ? $staropt$star[0] : default_loc[0];
  var attrs = $staropt$star$1 ? $staropt$star$1[0] : /* [] */0;
  return /* record */[
          /* pcl_desc */d,
          /* pcl_loc */loc,
          /* pcl_attributes */attrs
        ];
}

function attr$5(d, a) {
  return /* record */[
          /* pcl_desc */d[/* pcl_desc */0],
          /* pcl_loc */d[/* pcl_loc */1],
          /* pcl_attributes */Pervasives.$at(d[/* pcl_attributes */2], /* :: */[
                a,
                /* [] */0
              ])
        ];
}

function constr$1(loc, attrs, a, b) {
  return mk$7(loc, attrs, /* Pcl_constr */Block.__(0, [
                a,
                b
              ]));
}

function structure$1(loc, attrs, a) {
  return mk$7(loc, attrs, /* Pcl_structure */Block.__(1, [a]));
}

function fun_$1(loc, attrs, a, b, c, d) {
  return mk$7(loc, attrs, /* Pcl_fun */Block.__(2, [
                a,
                b,
                c,
                d
              ]));
}

function apply$2(loc, attrs, a, b) {
  return mk$7(loc, attrs, /* Pcl_apply */Block.__(3, [
                a,
                b
              ]));
}

function let_$1(loc, attrs, a, b, c) {
  return mk$7(loc, attrs, /* Pcl_let */Block.__(4, [
                a,
                b,
                c
              ]));
}

function constraint_$3(loc, attrs, a, b) {
  return mk$7(loc, attrs, /* Pcl_constraint */Block.__(5, [
                a,
                b
              ]));
}

function extension$7(loc, attrs, a) {
  return mk$7(loc, attrs, /* Pcl_extension */Block.__(6, [a]));
}

var Cl = /* module */[
  /* mk */mk$7,
  /* attr */attr$5,
  /* constr */constr$1,
  /* structure */structure$1,
  /* fun_ */fun_$1,
  /* apply */apply$2,
  /* let_ */let_$1,
  /* constraint_ */constraint_$3,
  /* extension */extension$7
];

function mk$8($staropt$star, $staropt$star$1, d) {
  var loc = $staropt$star ? $staropt$star[0] : default_loc[0];
  var attrs = $staropt$star$1 ? $staropt$star$1[0] : /* [] */0;
  return /* record */[
          /* pcty_desc */d,
          /* pcty_loc */loc,
          /* pcty_attributes */attrs
        ];
}

function attr$6(d, a) {
  return /* record */[
          /* pcty_desc */d[/* pcty_desc */0],
          /* pcty_loc */d[/* pcty_loc */1],
          /* pcty_attributes */Pervasives.$at(d[/* pcty_attributes */2], /* :: */[
                a,
                /* [] */0
              ])
        ];
}

function constr$2(loc, attrs, a, b) {
  return mk$8(loc, attrs, /* Pcty_constr */Block.__(0, [
                a,
                b
              ]));
}

function signature$1(loc, attrs, a) {
  return mk$8(loc, attrs, /* Pcty_signature */Block.__(1, [a]));
}

function arrow$1(loc, attrs, a, b, c) {
  return mk$8(loc, attrs, /* Pcty_arrow */Block.__(2, [
                a,
                b,
                c
              ]));
}

function extension$8(loc, attrs, a) {
  return mk$8(loc, attrs, /* Pcty_extension */Block.__(3, [a]));
}

var Cty = /* module */[
  /* mk */mk$8,
  /* attr */attr$6,
  /* constr */constr$2,
  /* signature */signature$1,
  /* arrow */arrow$1,
  /* extension */extension$8
];

function mk$9($staropt$star, $staropt$star$1, $staropt$star$2, d) {
  var loc = $staropt$star ? $staropt$star[0] : default_loc[0];
  var attrs = $staropt$star$1 ? $staropt$star$1[0] : /* [] */0;
  var docs = $staropt$star$2 ? $staropt$star$2[0] : Docstrings$Jeason.empty_docs;
  return /* record */[
          /* pctf_desc */d,
          /* pctf_loc */loc,
          /* pctf_attributes */Docstrings$Jeason.add_docs_attrs(docs, attrs)
        ];
}

function inherit_(loc, attrs, a) {
  return mk$9(loc, attrs, /* None */0, /* Pctf_inherit */Block.__(0, [a]));
}

function val_(loc, attrs, a, b, c, d) {
  return mk$9(loc, attrs, /* None */0, /* Pctf_val */Block.__(1, [/* tuple */[
                  a,
                  b,
                  c,
                  d
                ]]));
}

function method_(loc, attrs, a, b, c, d) {
  return mk$9(loc, attrs, /* None */0, /* Pctf_method */Block.__(2, [/* tuple */[
                  a,
                  b,
                  c,
                  d
                ]]));
}

function constraint_$4(loc, attrs, a, b) {
  return mk$9(loc, attrs, /* None */0, /* Pctf_constraint */Block.__(3, [/* tuple */[
                  a,
                  b
                ]]));
}

function extension$9(loc, attrs, a) {
  return mk$9(loc, attrs, /* None */0, /* Pctf_extension */Block.__(5, [a]));
}

function attribute$2(loc, a) {
  return mk$9(loc, /* None */0, /* None */0, /* Pctf_attribute */Block.__(4, [a]));
}

function text$2(txt) {
  return List.map((function (ds) {
                return attribute$2(/* Some */[Docstrings$Jeason.docstring_loc(ds)], Docstrings$Jeason.text_attr(ds));
              }), txt);
}

function attr$7(d, a) {
  return /* record */[
          /* pctf_desc */d[/* pctf_desc */0],
          /* pctf_loc */d[/* pctf_loc */1],
          /* pctf_attributes */Pervasives.$at(d[/* pctf_attributes */2], /* :: */[
                a,
                /* [] */0
              ])
        ];
}

function mk$10($staropt$star, $staropt$star$1, $staropt$star$2, d) {
  var loc = $staropt$star ? $staropt$star[0] : default_loc[0];
  var attrs = $staropt$star$1 ? $staropt$star$1[0] : /* [] */0;
  var docs = $staropt$star$2 ? $staropt$star$2[0] : Docstrings$Jeason.empty_docs;
  return /* record */[
          /* pcf_desc */d,
          /* pcf_loc */loc,
          /* pcf_attributes */Docstrings$Jeason.add_docs_attrs(docs, attrs)
        ];
}

function inherit_$1(loc, attrs, a, b, c) {
  return mk$10(loc, attrs, /* None */0, /* Pcf_inherit */Block.__(0, [
                a,
                b,
                c
              ]));
}

function val_$1(loc, attrs, a, b, c) {
  return mk$10(loc, attrs, /* None */0, /* Pcf_val */Block.__(1, [/* tuple */[
                  a,
                  b,
                  c
                ]]));
}

function method_$1(loc, attrs, a, b, c) {
  return mk$10(loc, attrs, /* None */0, /* Pcf_method */Block.__(2, [/* tuple */[
                  a,
                  b,
                  c
                ]]));
}

function constraint_$5(loc, attrs, a, b) {
  return mk$10(loc, attrs, /* None */0, /* Pcf_constraint */Block.__(3, [/* tuple */[
                  a,
                  b
                ]]));
}

function initializer_(loc, attrs, a) {
  return mk$10(loc, attrs, /* None */0, /* Pcf_initializer */Block.__(4, [a]));
}

function extension$10(loc, attrs, a) {
  return mk$10(loc, attrs, /* None */0, /* Pcf_extension */Block.__(6, [a]));
}

function attribute$3(loc, a) {
  return mk$10(loc, /* None */0, /* None */0, /* Pcf_attribute */Block.__(5, [a]));
}

function text$3(txt) {
  return List.map((function (ds) {
                return attribute$3(/* Some */[Docstrings$Jeason.docstring_loc(ds)], Docstrings$Jeason.text_attr(ds));
              }), txt);
}

function virtual_(ct) {
  return /* Cfk_virtual */Block.__(0, [ct]);
}

function concrete(o, e) {
  return /* Cfk_concrete */Block.__(1, [
            o,
            e
          ]);
}

function attr$8(d, a) {
  return /* record */[
          /* pcf_desc */d[/* pcf_desc */0],
          /* pcf_loc */d[/* pcf_loc */1],
          /* pcf_attributes */Pervasives.$at(d[/* pcf_attributes */2], /* :: */[
                a,
                /* [] */0
              ])
        ];
}

function mk$11($staropt$star, $staropt$star$1, $staropt$star$2, $staropt$star$3, name, typ) {
  var loc = $staropt$star ? $staropt$star[0] : default_loc[0];
  var attrs = $staropt$star$1 ? $staropt$star$1[0] : /* [] */0;
  var docs = $staropt$star$2 ? $staropt$star$2[0] : Docstrings$Jeason.empty_docs;
  var prim = $staropt$star$3 ? $staropt$star$3[0] : /* [] */0;
  return /* record */[
          /* pval_name */name,
          /* pval_type */typ,
          /* pval_prim */prim,
          /* pval_attributes */Docstrings$Jeason.add_docs_attrs(docs, attrs),
          /* pval_loc */loc
        ];
}

var Val = /* module */[/* mk */mk$11];

function mk$12($staropt$star, $staropt$star$1, $staropt$star$2, $staropt$star$3, name, typ) {
  var loc = $staropt$star ? $staropt$star[0] : default_loc[0];
  var attrs = $staropt$star$1 ? $staropt$star$1[0] : /* [] */0;
  var docs = $staropt$star$2 ? $staropt$star$2[0] : Docstrings$Jeason.empty_docs;
  var text = $staropt$star$3 ? $staropt$star$3[0] : /* [] */0;
  return /* record */[
          /* pmd_name */name,
          /* pmd_type */typ,
          /* pmd_attributes */Docstrings$Jeason.add_text_attrs(text, Docstrings$Jeason.add_docs_attrs(docs, attrs)),
          /* pmd_loc */loc
        ];
}

var Md = /* module */[/* mk */mk$12];

function mk$13($staropt$star, $staropt$star$1, $staropt$star$2, $staropt$star$3, typ, name) {
  var loc = $staropt$star ? $staropt$star[0] : default_loc[0];
  var attrs = $staropt$star$1 ? $staropt$star$1[0] : /* [] */0;
  var docs = $staropt$star$2 ? $staropt$star$2[0] : Docstrings$Jeason.empty_docs;
  var text = $staropt$star$3 ? $staropt$star$3[0] : /* [] */0;
  return /* record */[
          /* pmtd_name */name,
          /* pmtd_type */typ,
          /* pmtd_attributes */Docstrings$Jeason.add_text_attrs(text, Docstrings$Jeason.add_docs_attrs(docs, attrs)),
          /* pmtd_loc */loc
        ];
}

var Mtd = /* module */[/* mk */mk$13];

function mk$14($staropt$star, $staropt$star$1, $staropt$star$2, $staropt$star$3, name, expr) {
  var loc = $staropt$star ? $staropt$star[0] : default_loc[0];
  var attrs = $staropt$star$1 ? $staropt$star$1[0] : /* [] */0;
  var docs = $staropt$star$2 ? $staropt$star$2[0] : Docstrings$Jeason.empty_docs;
  var text = $staropt$star$3 ? $staropt$star$3[0] : /* [] */0;
  return /* record */[
          /* pmb_name */name,
          /* pmb_expr */expr,
          /* pmb_attributes */Docstrings$Jeason.add_text_attrs(text, Docstrings$Jeason.add_docs_attrs(docs, attrs)),
          /* pmb_loc */loc
        ];
}

var Mb = /* module */[/* mk */mk$14];

function mk$15($staropt$star, $staropt$star$1, $staropt$star$2, $staropt$star$3, lid) {
  var loc = $staropt$star ? $staropt$star[0] : default_loc[0];
  var attrs = $staropt$star$1 ? $staropt$star$1[0] : /* [] */0;
  var docs = $staropt$star$2 ? $staropt$star$2[0] : Docstrings$Jeason.empty_docs;
  var override = $staropt$star$3 ? $staropt$star$3[0] : /* Fresh */1;
  return /* record */[
          /* popen_lid */lid,
          /* popen_override */override,
          /* popen_loc */loc,
          /* popen_attributes */Docstrings$Jeason.add_docs_attrs(docs, attrs)
        ];
}

var Opn = /* module */[/* mk */mk$15];

function mk$16($staropt$star, $staropt$star$1, $staropt$star$2, mexpr) {
  var loc = $staropt$star ? $staropt$star[0] : default_loc[0];
  var attrs = $staropt$star$1 ? $staropt$star$1[0] : /* [] */0;
  var docs = $staropt$star$2 ? $staropt$star$2[0] : Docstrings$Jeason.empty_docs;
  return /* record */[
          /* pincl_mod */mexpr,
          /* pincl_loc */loc,
          /* pincl_attributes */Docstrings$Jeason.add_docs_attrs(docs, attrs)
        ];
}

var Incl = /* module */[/* mk */mk$16];

function mk$17($staropt$star, $staropt$star$1, $staropt$star$2, $staropt$star$3, pat, expr) {
  var loc = $staropt$star ? $staropt$star[0] : default_loc[0];
  var attrs = $staropt$star$1 ? $staropt$star$1[0] : /* [] */0;
  var docs = $staropt$star$2 ? $staropt$star$2[0] : Docstrings$Jeason.empty_docs;
  var text = $staropt$star$3 ? $staropt$star$3[0] : /* [] */0;
  return /* record */[
          /* pvb_pat */pat,
          /* pvb_expr */expr,
          /* pvb_attributes */Docstrings$Jeason.add_text_attrs(text, Docstrings$Jeason.add_docs_attrs(docs, attrs)),
          /* pvb_loc */loc
        ];
}

var Vb = /* module */[/* mk */mk$17];

function mk$18($staropt$star, $staropt$star$1, $staropt$star$2, $staropt$star$3, $staropt$star$4, $staropt$star$5, name, expr) {
  var loc = $staropt$star ? $staropt$star[0] : default_loc[0];
  var attrs = $staropt$star$1 ? $staropt$star$1[0] : /* [] */0;
  var docs = $staropt$star$2 ? $staropt$star$2[0] : Docstrings$Jeason.empty_docs;
  var text = $staropt$star$3 ? $staropt$star$3[0] : /* [] */0;
  var virt = $staropt$star$4 ? $staropt$star$4[0] : /* Concrete */1;
  var params = $staropt$star$5 ? $staropt$star$5[0] : /* [] */0;
  return /* record */[
          /* pci_virt */virt,
          /* pci_params */params,
          /* pci_name */name,
          /* pci_expr */expr,
          /* pci_loc */loc,
          /* pci_attributes */Docstrings$Jeason.add_text_attrs(text, Docstrings$Jeason.add_docs_attrs(docs, attrs))
        ];
}

var Ci = /* module */[/* mk */mk$18];

function mk$19($staropt$star, $staropt$star$1, $staropt$star$2, $staropt$star$3, $staropt$star$4, $staropt$star$5, $staropt$star$6, $staropt$star$7, manifest, name) {
  var loc = $staropt$star ? $staropt$star[0] : default_loc[0];
  var attrs = $staropt$star$1 ? $staropt$star$1[0] : /* [] */0;
  var docs = $staropt$star$2 ? $staropt$star$2[0] : Docstrings$Jeason.empty_docs;
  var text = $staropt$star$3 ? $staropt$star$3[0] : /* [] */0;
  var params = $staropt$star$4 ? $staropt$star$4[0] : /* [] */0;
  var cstrs = $staropt$star$5 ? $staropt$star$5[0] : /* [] */0;
  var kind = $staropt$star$6 ? $staropt$star$6[0] : /* Ptype_abstract */0;
  var priv = $staropt$star$7 ? $staropt$star$7[0] : /* Public */1;
  return /* record */[
          /* ptype_name */name,
          /* ptype_params */params,
          /* ptype_cstrs */cstrs,
          /* ptype_kind */kind,
          /* ptype_private */priv,
          /* ptype_manifest */manifest,
          /* ptype_attributes */Docstrings$Jeason.add_text_attrs(text, Docstrings$Jeason.add_docs_attrs(docs, attrs)),
          /* ptype_loc */loc
        ];
}

function constructor($staropt$star, $staropt$star$1, $staropt$star$2, $staropt$star$3, res, name) {
  var loc = $staropt$star ? $staropt$star[0] : default_loc[0];
  var attrs = $staropt$star$1 ? $staropt$star$1[0] : /* [] */0;
  var info = $staropt$star$2 ? $staropt$star$2[0] : Docstrings$Jeason.empty_info;
  var args = $staropt$star$3 ? $staropt$star$3[0] : /* [] */0;
  return /* record */[
          /* pcd_name */name,
          /* pcd_args */args,
          /* pcd_res */res,
          /* pcd_loc */loc,
          /* pcd_attributes */Docstrings$Jeason.add_info_attrs(info, attrs)
        ];
}

function field$1($staropt$star, $staropt$star$1, $staropt$star$2, $staropt$star$3, name, typ) {
  var loc = $staropt$star ? $staropt$star[0] : default_loc[0];
  var attrs = $staropt$star$1 ? $staropt$star$1[0] : /* [] */0;
  var info = $staropt$star$2 ? $staropt$star$2[0] : Docstrings$Jeason.empty_info;
  var mut = $staropt$star$3 ? $staropt$star$3[0] : /* Immutable */0;
  return /* record */[
          /* pld_name */name,
          /* pld_mutable */mut,
          /* pld_type */typ,
          /* pld_loc */loc,
          /* pld_attributes */Docstrings$Jeason.add_info_attrs(info, attrs)
        ];
}

var Type = /* module */[
  /* mk */mk$19,
  /* constructor */constructor,
  /* field */field$1
];

function mk$20($staropt$star, $staropt$star$1, $staropt$star$2, $staropt$star$3, path, constructors) {
  var attrs = $staropt$star ? $staropt$star[0] : /* [] */0;
  var docs = $staropt$star$1 ? $staropt$star$1[0] : Docstrings$Jeason.empty_docs;
  var params = $staropt$star$2 ? $staropt$star$2[0] : /* [] */0;
  var priv = $staropt$star$3 ? $staropt$star$3[0] : /* Public */1;
  return /* record */[
          /* ptyext_path */path,
          /* ptyext_params */params,
          /* ptyext_constructors */constructors,
          /* ptyext_private */priv,
          /* ptyext_attributes */Docstrings$Jeason.add_docs_attrs(docs, attrs)
        ];
}

function constructor$1($staropt$star, $staropt$star$1, $staropt$star$2, $staropt$star$3, name, kind) {
  var loc = $staropt$star ? $staropt$star[0] : default_loc[0];
  var attrs = $staropt$star$1 ? $staropt$star$1[0] : /* [] */0;
  var docs = $staropt$star$2 ? $staropt$star$2[0] : Docstrings$Jeason.empty_docs;
  var info = $staropt$star$3 ? $staropt$star$3[0] : Docstrings$Jeason.empty_info;
  return /* record */[
          /* pext_name */name,
          /* pext_kind */kind,
          /* pext_loc */loc,
          /* pext_attributes */Docstrings$Jeason.add_docs_attrs(docs, Docstrings$Jeason.add_info_attrs(info, attrs))
        ];
}

function decl($staropt$star, $staropt$star$1, $staropt$star$2, $staropt$star$3, $staropt$star$4, res, name) {
  var loc = $staropt$star ? $staropt$star[0] : default_loc[0];
  var attrs = $staropt$star$1 ? $staropt$star$1[0] : /* [] */0;
  var docs = $staropt$star$2 ? $staropt$star$2[0] : Docstrings$Jeason.empty_docs;
  var info = $staropt$star$3 ? $staropt$star$3[0] : Docstrings$Jeason.empty_info;
  var args = $staropt$star$4 ? $staropt$star$4[0] : /* [] */0;
  return /* record */[
          /* pext_name */name,
          /* pext_kind : Pext_decl */Block.__(0, [
              args,
              res
            ]),
          /* pext_loc */loc,
          /* pext_attributes */Docstrings$Jeason.add_docs_attrs(docs, Docstrings$Jeason.add_info_attrs(info, attrs))
        ];
}

function rebind($staropt$star, $staropt$star$1, $staropt$star$2, $staropt$star$3, name, lid) {
  var loc = $staropt$star ? $staropt$star[0] : default_loc[0];
  var attrs = $staropt$star$1 ? $staropt$star$1[0] : /* [] */0;
  var docs = $staropt$star$2 ? $staropt$star$2[0] : Docstrings$Jeason.empty_docs;
  var info = $staropt$star$3 ? $staropt$star$3[0] : Docstrings$Jeason.empty_info;
  return /* record */[
          /* pext_name */name,
          /* pext_kind : Pext_rebind */Block.__(1, [lid]),
          /* pext_loc */loc,
          /* pext_attributes */Docstrings$Jeason.add_docs_attrs(docs, Docstrings$Jeason.add_info_attrs(info, attrs))
        ];
}

var Te = /* module */[
  /* mk */mk$20,
  /* constructor */constructor$1,
  /* decl */decl,
  /* rebind */rebind
];

function mk$21(self, fields) {
  return /* record */[
          /* pcsig_self */self,
          /* pcsig_fields */fields
        ];
}

var Csig = /* module */[/* mk */mk$21];

function mk$22(self, fields) {
  return /* record */[
          /* pcstr_self */self,
          /* pcstr_fields */fields
        ];
}

var Cstr = /* module */[/* mk */mk$22];

var Exp = [
  mk$2,
  attr$2,
  ident,
  constant$1,
  let_,
  fun_,
  function_,
  apply,
  match_,
  try_,
  tuple$2,
  construct$1,
  variant$2,
  record$1,
  field,
  setfield,
  array$1,
  ifthenelse,
  sequence,
  while_,
  for_,
  coerce,
  constraint_$1,
  send,
  new_,
  setinstvar,
  override,
  letmodule,
  assert_,
  lazy_$1,
  poly$1,
  object_$1,
  newtype,
  pack,
  open_,
  extension$2,
  $$case
];

var Ctf = [
  mk$9,
  attr$7,
  inherit_,
  val_,
  method_,
  constraint_$4,
  extension$9,
  attribute$2,
  text$2
];

var Cf = [
  mk$10,
  attr$8,
  inherit_$1,
  val_$1,
  method_$1,
  constraint_$5,
  initializer_,
  extension$10,
  attribute$3,
  text$3,
  virtual_,
  concrete
];

exports.default_loc = default_loc;
exports.with_default_loc = with_default_loc;
exports.Typ = Typ;
exports.Pat = Pat;
exports.Exp = Exp;
exports.Val = Val;
exports.Type = Type;
exports.Te = Te;
exports.Mty = Mty;
exports.Mod = Mod;
exports.Sig = Sig;
exports.Str = Str;
exports.Md = Md;
exports.Mtd = Mtd;
exports.Mb = Mb;
exports.Opn = Opn;
exports.Incl = Incl;
exports.Vb = Vb;
exports.Cty = Cty;
exports.Ctf = Ctf;
exports.Cl = Cl;
exports.Cf = Cf;
exports.Ci = Ci;
exports.Csig = Csig;
exports.Cstr = Cstr;
/* Location-Jeason Not a pure module */
